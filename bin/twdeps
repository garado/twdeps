#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'twdeps'
require 'optimist'

def log(msg)
  STDERR.puts "#{File.basename($0)}: #{msg}"
end

def die(msg = nil)
  log(msg) unless msg.nil?
  exit 1
end

include TaskWarrior
include TaskWarrior::Dependencies

opts = Optimist::options do
  version "#{File.basename($0)} v#{VERSION} (c) 2012-#{Time.now.year} Nicolas E. Rabenau"
  banner <<-EOS
Visualizes dependencies between TaskWarrior tasks.

Usage:
       #{File.basename($0)} [options]

where [options] are:

EOS
  opt :format,  "Specify output format", :default => 'svg'
  opt :title,   "Specify title", :default => 'Roadmap'
  opt :trace,   "Enable trace output", :default => false
  opt :taskid,  "ID of *special* task", :default => -1
  opt :fg,      "Fg color", :default => "#eceff4"
  opt :sbfg,    "Subtitle fg color", :default => "#d8dee9"
  opt :bg,      "Bg color", :default => "#2e3440" 
  opt :nodebg,  "Node bg color", :default => "#3b4252" 
  opt :selbg,   "Selected node bg color", :default => "#81a1c1" 
  opt :selfg,   "Selected node fg color", :default => "#5e81ac" 
  opt :selsbfg, "Selected node subtitle fg color", :default => "#5e81ac"
  opt :green,   "Completed", :default => "#a3be8c"
  opt :fontname, "Font name", :default => "CircularStd"
end

Optimist::die :format, "must be one of #{Graph.formats.join(', ')}" unless Graph.formats.include?(opts[:format])

begin
  $fg = opts[:fg]
  $sbfg = opts[:sbfg]
  $bg = opts[:bg]
  $nodebg = opts[:nodebg]
  $selbg  = opts[:selbg]
  $selfg  = opts[:selfg]
  $selsbfg  = opts[:selsbfg]
  $green  = opts[:green]
  $fontname = opts[:fontname]
  $selected_taskid = opts[:taskid]

  repo = Repository.new(ARGF.read)
  master = Graph.new(Presenter.new(opts[:title]))

  # Add all projects (will add their tasks and dependencies recursively)
  repo.projects.each do |project|
    master << project
  end

  # Add all project-less tasks as toplevel nodes
  repo.tasks.reject{|t| t.project}.each do |task|
    master << task
  end

  puts master.render(opts[:format])
rescue
  if opts[:trace]
    log($!)
    $@.each{|line| log(line)}
  else
    die($!)
  end
end
